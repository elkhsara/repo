import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from plotly.subplots import make_subplots

def rolling_window_model_with_pnl(
    data,
    feature_cols,
    target_col,
    initial_train_period,
    test_period,
    step,
    scaler=StandardScaler(),
    model=LinearRegression(),
    thres1=-1,
    thres2=1
):
    """
    Perform rolling window training, testing, and collect predictions for PnL calculation.

    Parameters:
    - data: DataFrame with datetime index.
    - feature_cols: List of feature column names.
    - target_col: Name of the target column.
    - initial_train_period: Timedelta string for initial training period (e.g., '30D' for 30 days).
    - test_period: Timedelta string for test period (e.g., '7D' for 7 days).
    - step: Timedelta string for step size (e.g., '7D' to move weekly).
    - scaler: Scaler object (default: StandardScaler).
    - model: Model object (default: LinearRegression).
    - thres1: Threshold 1 for PnL calculation.
    - thres2: Threshold 2 for PnL calculation.

    Returns:
    - all_predictions: DataFrame with all test data, predictions, and PnL calculations.
    """
    predictions = []

    # Ensure data is sorted and datetime is the index
    data = data.sort_values('datetime').reset_index(drop=True)
    data['datetime'] = pd.to_datetime(data['datetime'])
    data.set_index('datetime', inplace=True)
    
    start_date = data.index.min()
    end_date = data.index.max()
    
    train_end = start_date + pd.Timedelta(initial_train_period)
    test_end = train_end + pd.Timedelta(test_period)
    
    while test_end <= end_date:
        # Define train and test sets
        train_data = data[start_date:train_end]
        test_data = data[train_end:test_end]
        
        if test_data.empty:
            break  # Exit if no test data
        
        X_train = train_data[feature_cols]
        y_train = train_data[target_col]
        X_test = test_data[feature_cols]
        y_test = test_data[target_col]
        
        # Scale the data
        scaler.fit(X_train)
        X_train_scaled = scaler.transform(X_train)
        X_test_scaled = scaler.transform(X_test)
        
        # Train the model
        model.fit(X_train_scaled, y_train)
        
        # Predict
        y_pred = model.predict(X_test_scaled)
        
        # Store predictions with actuals and timestamps
        test_data = test_data.copy()
        test_data['prediction'] = y_pred
        predictions.append(test_data[[target_col, 'prediction']])
        
        # Move the window forward
        start_date += pd.Timedelta(step)
        train_end += pd.Timedelta(step)
        test_end += pd.Timedelta(step)
    
    # Concatenate all predictions
    all_predictions = pd.concat(predictions)
    all_predictions.reset_index(inplace=True)  # Bring datetime back as a column
    
    return all_predictions

